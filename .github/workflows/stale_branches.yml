name: Delete Stale Branches

on:
  schedule:
    # This will run every day at midnight (UTC)
    - cron: '0 0 * * *'
  workflow_dispatch:
    # Allows manual trigger of the workflow
    # This can be run manually from the GitHub Actions tab if needed

jobs:
  delete-stale-branches:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install gh

      - name: Authenticate with GitHub CLI
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | gh auth login --with-token

      - name: List all branches
        run: |
          # List both remote and local branches
          echo "Listing all branches..."
          git branch -r
          git branch
        shell: bash

      - name: Get all branches and check for stale ones
        run: |
          # List both remote and local branches
          branches=$(git branch -r | grep -v '\->' && git branch | grep -v '\->')
          echo "Branches found: $branches"

          # Set the threshold for "stale" branches (5 minutes ago)
          stale_threshold=$(date -d "5 minutes ago" +%s)
          echo "Stale threshold: $stale_threshold (5 minutes ago)"

          # Process each branch
          for branch in $branches; do
            # Trim the 'origin/' prefix for remote branches (if applicable)
            branch_name=$(echo "$branch" | sed 's/^origin\///')

            # Get the last commit date of each branch (local or remote)
            if [[ "$branch" =~ ^origin/ ]]; then
              # Remote branch
              last_commit_date=$(git log -1 --format=%ct "$branch")
            else
              # Local branch
              last_commit_date=$(git log -1 --format=%ct "$branch_name")
            fi

            echo "Branch: $branch, Last commit date: $last_commit_date"

            # Compare the commit date to the threshold
            if [[ $last_commit_date -lt $stale_threshold ]]; then
              echo "Deleting stale branch: $branch"
              # If it's a remote branch, delete it from the remote
              if [[ "$branch" =~ ^origin/ ]]; then
                git push origin --delete "$branch_name"
              else
                # If it's a local branch, delete it locally
                git branch -d "$branch_name"
              fi
            else
              echo "Branch is still active: $branch"
            fi
          done
        shell: bash
